import logging
from typing import List

logging.basicConfig(level=logging.INFO)

def format_depends_on(depends_on: List[str]) -> str:
    """
    Formats a list of dependencies into a Terraform-compatible string.

    Parameters:
        depends_on (List[str]): A list of resource dependencies.

    Returns:
        str: A formatted string representing the dependencies in Terraform syntax.
    """
    if not all(isinstance(dep, str) for dep in depends_on):
        raise ValueError("All dependencies must be strings.")
    return ", ".join([f"azion_edge_application_main_setting.{item}" for item in depends_on])

def normalize_name(name: str) -> str:
    """
    Normalizes a name by replacing spaces and ensuring it's lowercase.

    Parameters:
        name (str): The name to normalize.

    Returns:
        str: The normalized name.
    """
    if not isinstance(name, str):
        raise ValueError("Expected a string for name.")
    return name.replace(" ", "_").lower()

def extract_hostname(behaviors: List[dict]) -> str:
    """
    Extracts the hostname from Akamai behaviors.

    Parameters:
        behaviors (List[dict]): A list of behaviors from Akamai configuration.

    Returns:
        str: The extracted hostname or a placeholder if not found.
    """
    try:
        origin_behavior = next((b for b in behaviors if b.get("name") == "origin"), {})
        return origin_behavior.get("options", {}).get("hostname", "placeholder.example.com")
    except ValueError as e:
        logging.error(f"Error extracting hostname: {e}")
        return "placeholder.example.com"

def log_conversion_summary(resources: List[dict]):
    """
    Logs a summary of the resources generated during conversion.

    Parameters:
        resources (List[dict]): A list of resources generated by the conversion process.
    """
    resource_types = [res["type"] for res in resources]
    logging.info(f"Conversion summary: {len(resources)} resources generated.")
    logging.info(f"Resource types: {', '.join(set(resource_types))}")

def write_indented(f, content, indent_level=0, indent_size=4):
    """
    Writes indented content to a file.

    Parameters:
        f (file object): The file to write to.
        content (str): The content to write.
        indent_level (int): The level of indentation.
    """
    indentation = " " * (indent_level * indent_size)
    f.write(indentation + content + "\n")

def write_list_items(f, items, indent_level=2):
    """
    Writes a list of items in Terraform format, ensuring no trailing comma.
    """
    for idx, item in enumerate(items):
        comma = "," if idx < len(items) - 1 else ""  # Add a comma only if not the last item
        write_indented(f, f"{item}{comma}", indent_level)
